apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ include "mongodb-cluster-demo.fullname" . }}-cfg"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mongodb-cluster-demo.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "mongodb-cluster-demo.labels" . | nindent 6 }}
      role: mongo-cfg
  serviceName: "{{ include "mongodb-cluster-demo.fullname" . }}-cfgsvc"
  replicas: {{ .Values.replicas.cfg.count }}
  template:
    metadata:
      labels:
        {{- include "mongodb-cluster-demo.labels" . | nindent 8 }}
        role: mongo-cfg
        app: mongo
      {{- if not .Values.serviceMonitor.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "metrics"
      {{- end }}
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      terminationGracePeriodSeconds: 30
      {{- $nodes := (lookup "v1" "Node" "" "").items }}
      {{- if $nodes }}
      #Nodes count: {{- len $nodes }} ; minAvailable.cfg: {{- .Values.minAvailable.cfg }}; Replicas: {{- .Values.replicas.cfg.count }}
        {{- if gt (len $nodes | int) (.Values.minAvailable.cfg | int) }}
          {{- if gt (len $nodes | int) (.Values.replicas.cfg.count | int) }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: 'app.kubernetes.io/name'
                operator: In
                values:
                - "{{ include "mongodb-cluster-demo.name" . }}"
              - key: 'app.kubernetes.io/instance'
                operator: In
                values:
                - "{{ .Release.Name }}"
              - key: 'helm-revision'
                operator: In
                values:
                - "{{ .Release.Revision }}"
              - key: 'role'
                operator: In
                values:
                - "mongo-cfg"
            topologyKey: "kubernetes.io/hostname"
          {{- end }}
        {{- end }}
      {{- end }}
      volumes:
      - name: keyfiles
        secret:
            secretName: {{ include "mongodb-cluster-demo.fullname" . }}-keys
            defaultMode: 0644
            items:
            - key: key1
              path: keyfile
      initContainers:
      # - name: init
      #   securityContext:
      #     runAsUser: 0
      #     runAsGroup: 0
      #     # privileged: true
      #   image: busybox:latest
      #   command:
      #     - '/bin/ash'
      #     - '-c'
      #     - |
      #       ls -l /data
      #       owner=""
      #       [ ! "$(id -u $(stat -c "%U" /data/configdb))" == "999" ] && owner="999"
      #       [ ! "$(id -g $(stat -c "%G" /data/configdb))" == "999" ] && owner="${owner}:999"
      #       [ ! -z "$owner" ] && chown -R 999:999 /data/configdb
      #       ls -l /data
      #       [ "$(sysctl net.ipv4.tcp_keepalive_time | cut -d'=' -f2 | tr -d ' ')" -ne 180 ] && sysctl -w net.ipv4.tcp_keepalive_time=180  || true
      #       [ "$(sysctl net.ipv4.tcp_keepalive_intvl | cut -d'=' -f2 | tr -d ' ')" -ne 180 ] && sysctl -w net.ipv4.tcp_keepalive_intvl=180  || true
      #       [ "$(sysctl net.ipv4.tcp_keepalive_probes | cut -d'=' -f2 | tr -d ' ')" -ne 4 ] && sysctl -w net.ipv4.tcp_keepalive_probes=4  || true
      #       [ "$(sysctl vm.swappiness | cut -d"=" -f2 | cut -d" " -f2)" -lt 1 ] && sysctl -w vm.max_map_count=1 || true
      #   volumeMounts:
      #     - name: mongocfg-persistent-storage
      #       mountPath: /data/configdb
      - name: mongo-pwd
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        image: "{{ $.Values.image.repository }}:{{ $.Chart.AppVersion }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        command:
          - 'bash'
          - '-c'
          - |
            set -ex
            owner=""
            DBPATH="/data/configdb"
            [ ! "$(id -u $(stat -c "%U" $DBPATH))" == "999" ] && owner="999"
            [ ! "$(id -g $(stat -c "%G" $DBPATH))" == "999" ] && owner="${owner}:999"
            [ ! -z "$owner" ] && chown -R 999:999 $DBPATH
            ls -l /data
            [ "$(sysctl net.ipv4.tcp_keepalive_time | cut -d'=' -f2 | tr -d ' ')" -ne 180 ] && sysctl -w net.ipv4.tcp_keepalive_time=180  || true
            [ "$(sysctl net.ipv4.tcp_keepalive_intvl | cut -d'=' -f2 | tr -d ' ')" -ne 180 ] && sysctl -w net.ipv4.tcp_keepalive_intvl=180  || true
            [ "$(sysctl net.ipv4.tcp_keepalive_probes | cut -d'=' -f2 | tr -d ' ')" -ne 4 ] && sysctl -w net.ipv4.tcp_keepalive_probes=4  || true
            [ "$(sysctl vm.swappiness | cut -d"=" -f2 | cut -d" " -f2)" -lt 1 ] && sysctl -w vm.max_map_count=1 || true
            sleep 1s
            echo "app started at $(date -u)" | tee -a /tmp/prestop.log
            if [ "${MY_POD_NAME//*-}" == "0" ] ; then
              if [ ! -f "$DBPATH/pwdset" ] ; then
                touch "$DBPATH/pwdset"
                cp /secret/keyfile /tmp/keyfile
                chmod 400 /tmp/keyfile
                which nc || apt update && apt install -y netcat
                mongod --replSet {{ .Values.config_rs }} --configsvr --wiredTigerCacheSizeGB {{ $.Values.cacheSizeGB.cfg }} --bind_ip 127.0.0.1 --port {{ $.Values.service.cfg.ports.port }} --dbpath $DBPATH --transitionToAuth --keyFile=/tmp/keyfile &
                sleep 1s
                
                USERNAME={{ $.Values.clstAdminName }}
                set -x
                USERPASS="$ADM_PASS"
                HOST='127.0.0.1'
                FULLHOST={{ include "mongodb-cluster-demo.fullname" $ }}-cfg-0.{{ include "mongodb-cluster-demo.fullname" $ }}-cfgsvc.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.service.cfg.ports.port }}
                CONNSTR="mongodb://$USERNAME:$USERPASS@$HOST:{{ $.Values.service.cfg.ports.port }}/admin"
                CONNSTR2="mongodb://$HOST:{{ $.Values.service.cfg.ports.port }}/admin"
                timeout 15s sh -c "until nc -z -w 1 $HOST {{ .Values.service.cfg.ports.port }}; do (echo -n . ; sleep 1s); done; echo cfg-svc reached"
                ERRCODE=0
                RES=$(mongo $CONNSTR2  --quiet --eval 'db.getUsers();') || ERRCODE=$?
                echo "RES: $RES , ERRCODE: $ERRCODE"
                if [ $ERRCODE -ne 0 ] ; then
                  cat /etc/hosts
                  echo "$HOST $(echo $FULLHOST | cut -d':' -f1)" >> /etc/hosts
                  cat /etc/hosts

                  if [ ! "$(echo $RES | fgrep -c "admin.$USERNAME" )" == 1 ] ; then
                    mongo $CONNSTR2  --quiet --eval "rs.initiate( { _id : \"{{ .Values.config_rs }}\", members: [ { _id : 0, host : \"$FULLHOST\" } ] } )"
                    timeout 5m sh -c "set -ex ; until ( echo $(mongo $CONNSTR2 --quiet --eval 'rs.status().ok') | fgrep 1 ) ; do (echo -n . ; sleep 2s); done; echo cfg-svc rs.status good"
                    sleep 2s
                    mongo $CONNSTR2 --quiet --eval 'rs.status()'
                    mongo $CONNSTR2 --quiet --eval "db.createUser( { user: \"$USERNAME\", pwd: \"$USERPASS\", roles: [ \"root\" ], \"mechanisms\": [ \"SCRAM-SHA-1\", \"SCRAM-SHA-256\" ] } );"

                  else
                    echo $RES
                    ERRCODE2=0
                    RES2=$(mongo $CONNSTR  --quiet --eval 'db.getUsers();') || ERRCODE2=$?
                    echo "RES2: $RES2 , ERRCODE2: $ERRCODE2"
                  fi
                  USERNAME={{ $.Values.exporterUserName }}
                  USERPASS="$MONITORING_PASS"
                  if [ ! "$(echo $RES | fgrep -c "admin.$USERNAME" )" == 1 ] ; then
                    mongo $CONNSTR2  --quiet --eval "db.createUser( { user: \"$USERNAME\", pwd: \"$USERPASS\", roles: [ { role: \"clusterMonitor\", db: \"admin\" }, { role: \"read\", db: \"local\" } ], \"mechanisms\": [ \"SCRAM-SHA-1\", \"SCRAM-SHA-256\" ] } );"
                  else
                    echo $RES
                  fi
                else
                  ERRCODE2=0
                  RES2=$(mongo $CONNSTR  --quiet --eval 'db.getUsers();') || ERRCODE2=$?
                  echo "result ERRCODE2: $ERRCODE2"
                  echo "RES2: $RES2"
                fi
                kill $(pgrep mongod)
                timeout 5m sh -c 'while ( pgrep mongod > /dev/null ) ; do (echo -n . ; sleep 1s); done; echo finished'
                chown -R 999:999 $DBPATH
              else
                echo "pwd already set"
              fi
            fi
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: ADM_PASS
            valueFrom:
              secretKeyRef:
                name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
                key: dbaPassword
          - name: MONITORING_PASS
            valueFrom:
              secretKeyRef:
                name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
                key: monitoringPassword
        volumeMounts:
          - name: mongocfg-persistent-storage
            mountPath: /data/configdb
          - name: keyfiles
            mountPath: /secret/keyfile
            subPath: keyfile
            readOnly: true
      containers:
      - name: mongo
        image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - 'bash'
          - '-c'
          - |
            echo "app started at $(date -u)" | tee -a /tmp/prestop.log
            ps aux
            id
            ls -l /data
            ls -l /secret/keyfile
            cp /secret/keyfile /tmp/keyfile
            chmod 400 /tmp/keyfile
            ls -l /tmp/keyfile
            mongod --replSet {{ .Values.config_rs }} --configsvr --wiredTigerCacheSizeGB {{ .Values.cacheSizeGB.cfg }} --bind_ip_all --port {{ .Values.service.cfg.ports.port }} --dbpath /data/configdb --auth --keyFile=/tmp/keyfile
            EXCODE="$?"
            echo "app finished at $(date -u)" | tee -a /tmp/prestop.log
            echo "app finished, result code: $EXCODE"
            echo
            echo "Container lifecycle logged events:"
            echo
            cat /tmp/prestop.log
        lifecycle:
          preStop:
            exec:
              command: 
                - "/bin/bash"
                - "-c"
                - |
                  echo 'lyfecycle preStop hook: Pod is set to the “Terminating” State, pause 5s and send SIGINT to dotnet' >> /tmp/prestop.log
                  echo "sleep $(expr 10 - ${MY_POD_NAME//*-} )s since $(date -u)" >> /tmp/prestop.log
                  sleep $(expr 10 - ${MY_POD_NAME//*-} )s
                  echo "preStop will shutdown mongod now at $(date -u)" >> /tmp/prestop.log
                  mongod --shutdown
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        ports:
          - containerPort: {{ .Values.service.cfg.ports.port }}
        livenessProbe:
          exec:
            command:
            - bash
            - "-c"
            - |
              [ $(mongo mongodb://127.0.0.1:{{ .Values.service.cfg.ports.port }}/test --quiet --eval 'db.runCommand("ping").ok') == 1 ]
          initialDelaySeconds: 1
          periodSeconds: 5
        readinessProbe:
          exec:
            command:
            - bash
            - "-c"
            - |
              [ $(mongo mongodb://127.0.0.1:{{ .Values.service.cfg.ports.port }}/test --quiet --eval 'db.runCommand("ping").ok') == 1 ]
          initialDelaySeconds: 1
          periodSeconds: 5
        volumeMounts:
          - name: mongocfg-persistent-storage
            mountPath: /data/configdb
          - name: keyfiles
            mountPath: /secret/keyfile
            subPath: keyfile
            readOnly: true
      - name: mongo-sidecar
        image: cvallance/mongo-k8s-sidecar
        env:
          - name: MONGO_SIDECAR_POD_LABELS
            value: "role=mongo-cfg"
          - name: KUBERNETES_MONGO_SERVICE_NAME
            value: "{{ include "mongodb-cluster-demo.fullname" . }}-cfgsvc"
          - name: KUBE_NAMESPACE
            value: {{ .Release.Namespace }}
          - name: MONGO_PORT
            value: "{{ .Values.service.cfg.ports.port }}"
          - name: CONFIG_SVR
            value: "true"
          - name: MONGO_SIDECAR_SLEEP_SECONDS
            value: "5"
          - name: MONGO_SIDECAR_UNHEALTHY_SECONDS
            value: "15"
          - name: MONGODB_DATABASE
            value: admin
          - name: MONGODB_USERNAME
            value: "{{ $.Values.clstAdminName }}"
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
                key: dbaPassword
      - name: mongodb-exporter
        env:
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
                key: monitoringPassword
          - name: MONGODB_URI
            value: "mongodb://{{ $.Values.exporterUserName }}:$MONGODB_PASSWORD@127.0.0.1:{{ $.Values.service.cfg.ports.port }}"
        {{- if .Values.env }}
        {{- range $key, $value := .Values.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
        {{- end }}
        {{- end }}
        image: "{{ .Values.exporter_image.repository }}:{{ .Values.exporter_image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - --web.listen-address={{ printf ":%s" .Values.exporter_port }}
        {{- toYaml .Values.extraArgs | nindent 8 }}
        ports:
        - name: metrics
          containerPort: {{ .Values.exporter_port }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 10
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
  volumeClaimTemplates:
    - metadata:
        name: mongocfg-persistent-storage
      spec:
        {{- if .Values.storage.cfg.className }}
        storageClassName: "{{ .Values.storage.cfg.className }}"
        {{- end }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storage.cfg.claimSize }}