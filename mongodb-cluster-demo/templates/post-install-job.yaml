{{- $jobName := printf "%s-%s" ( printf "%s-job" ( include "mongodb-cluster-demo.fullname" $ ) ) (uuidv4 | sha256sum | trunc 8) | trunc 63 | trimSuffix "-" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $jobName }}"
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "mongodb-cluster-demo.labels" $ | nindent 4 }}
    helm-revision: "{{ $.Release.Revision }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    # comment lines below to debug and check logs
    #"helm.sh/hook": post-install,post-upgrade
    #"helm.sh/hook-weight": "-3"
    #"helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
spec:
  ttlSecondsAfterFinished: 90
  backoffLimit: 0
  activeDeadlineSeconds: 900
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: "{{ $jobName }}"
      labels:
        {{- include "mongodb-cluster-demo.labels" $ | nindent 8 }}
        helm-revision: "{{ $.Release.Revision }}"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      restartPolicy: Never
    {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
      - name: startup
        image: busybox:latest
        command:
          - sh
          - "-c"
          - |
            set -ex
            CFGLAST={{ include "mongodb-cluster-demo.fullname" $ }}-cfg-{{ ( sub ( .Values.replicas.cfg.count | int64 ) 1 ) | toString }}.{{ include "mongodb-cluster-demo.fullname" $ }}-cfgsvc.{{ $.Release.Namespace }}.svc.cluster.local
            ROUTERLAST={{ include "mongodb-cluster-demo.fullname" $ }}-router-{{ ( sub ( .Values.replicas.router.count | int64 ) 1 )  | toString }}.{{ include "mongodb-cluster-demo.fullname" $ }}-routersvc.{{ $.Release.Namespace }}.svc.cluster.local
            timeout 5m sh -c "until nc -z -w 1 $ROUTERLAST {{ .Values.service.router.ports.port }}; do (echo -n . ; sleep 1s); done; echo router-svc reached"
            timeout 5m sh -c "until nc -z -w 1 $CFGLAST {{ .Values.service.cfg.ports.port }}; do (echo -n . ; sleep 1s); done; echo cfg-svc reached"
        {{- range $i, $e := until ($.Values.shardsCount | int) }}
            DBLAST={{ include "mongodb-cluster-demo.fullname" $ }}-shard{{ $i }}-db-{{ ( sub ( $.Values.replicas.db.count | int64 ) 1 ) | toString }}.{{ include "mongodb-cluster-demo.fullname" $ }}-shard{{ $i }}-dbsvc.{{ $.Release.Namespace }}.svc.cluster.local
            timeout 5m sh -c "until nc -z -w 1 $DBLAST {{ $.Values.service.db.ports.port }}; do (echo -n _ ; sleep 1s); done; echo db-svc {{ $i }} reached"
        {{- end }}
      containers:
      - name: "mongo-sh-add"
        image: "{{ $.Values.image.repository }}:{{ $.Chart.AppVersion }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        command:
          - 'bash'
          - '-c'
          - |
            set -ex
            echo "app started at $(date -u)"
            USERNAME='{{ .Values.clstAdminName }}'
            USERPASS=$dbaPassword
            CFGSVC={{ include "mongodb-cluster-demo.fullname" $ }}-cfgsvc.{{ $.Release.Namespace }}.svc.cluster.local
            timeout 5m sh -c "until ( echo $(mongo mongodb://$USERNAME:$USERPASS@$CFGSVC:{{ .Values.service.cfg.ports.port }} --quiet --eval 'rs.status().ok') | fgrep 1 ) ; do (echo -n . ; sleep 2s); done; echo cfg-svc rs.status good"
            mongo mongodb://$USERNAME:$USERPASS@$CFGSVC:{{ .Values.service.cfg.ports.port }} --quiet --eval 'rs.status()'
          {{- range $i, $e := until ($.Values.shardsCount | int) }}
            DBSVC={{ include "mongodb-cluster-demo.fullname" $ }}-shard{{ $i }}-dbsvc.{{ $.Release.Namespace }}.svc.cluster.local
            timeout 5m sh -c "until ( echo $(mongo mongodb://{{ $.Values.clstAdminName }}-shardlocal:$USERPASS@$DBSVC:{{ $.Values.service.db.ports.port }} --quiet --eval 'rs.status().ok') | fgrep 1 ) ; do (echo -n _ ; sleep 2s); done; echo shard{{ $i }}-svc rs.status good"
            mongo mongodb://{{ $.Values.clstAdminName }}-shardlocal:$USERPASS@$DBSVC:{{ $.Values.service.db.ports.port }} --quiet --eval 'rs.status()'
          {{- end }}
            HOST={{ include "mongodb-cluster-demo.fullname" $ }}-routersvc.{{ $.Release.Namespace }}.svc.cluster.local
            CONNSTR="${USERNAME}:${USERPASS}@${HOST}"
            STATUS=$(mongo mongodb://$CONNSTR --quiet --eval 'sh.status()')
            set -ex
            echo $STATUS | fgrep -c {{ $.Values.db_rs }} || true
          {{- range $i, $e := until ($.Values.shardsCount | int) }}
          {{- $_ := set $ "shardIndex" $i }}
            if [ ! $( echo $STATUS | fgrep -c {{ $.Values.db_rs }}{{ $i }} ) == 1 ] ; then
              mongo mongodb://$CONNSTR --quiet --eval "sh.addShard(\"{{ include "mongodb-cluster-demo.dbstr" $ }}\")"
            fi
          {{- end }}
            mongo mongodb://$CONNSTR --quiet --eval 'sh.status()'
        envFrom:
        - secretRef:
            name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
          # - name: ADM_PASS
          #   valueFrom:
          #     secretKeyRef:
          #       name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
          #       key: dbaPassword
          # - name: USER_PASS
          #   valueFrom:
          #     secretKeyRef:
          #       name: "{{ include "mongodb-cluster-demo.fullname" $ }}-dbsecrets"
          #       key: userPassword


